---
Description: Move Jira ticket from TO DO to SCOPED after scoping conversation. Updates ticket with implementation plan and confirms all fields.
Globs: scripts/jira/*.js
---

# Move Ticket to SCOPED

## Workflow Context
```
TO DO ‚Üí SCOPED ‚Üí In Progress ‚Üí In Review ‚Üí Done
        ‚Üë Moving here
```

## Trigger Phrases

When user says:
- "move to scoped"
- "move [ticket] to scoped"
- "update [ticket] to scoped"
- "move this to scoped"

## Process

### 1. Fetch Current Ticket State

Query Jira for current ticket details and show to user:

```
"Current state of CRM-19:

üìã Title: Add keyboard shortcut hints to UI
üéØ Status: TO DO
‚ö° Priority: Medium
üè∑Ô∏è  Labels: frontend
üë§ Assignee: Unassigned
üìù Description: [current description]

Before moving to SCOPED, let's confirm everything is correct."
```

### 2. Confirm/Update All Fields

Go through each field and confirm or update:

#### Title
"Title: 'Add keyboard shortcut hints to UI' - is this accurate?"
- If yes, keep it
- If no, ask for correction

#### Priority
"Priority: Medium - does this match the scoped complexity?"
- Low complexity ‚Üí Low or Medium priority
- Medium complexity ‚Üí Medium priority  
- High complexity ‚Üí Medium or High priority
- If mismatch, suggest adjustment

#### Labels
"Labels: frontend - should we add any other area labels?"
- Review scoped plan for additional areas
- Suggest adding based on files (e.g., if touching utils, add relevant label)

#### Assignee
"Assignee: Unassigned - who should own this?"
- Offer to assign to user
- Offer to leave unassigned for later
- Offer to assign to specific person/agent

#### Estimate (if custom field exists)
"Should we add story points or time estimate to Jira?"
- Add if Jira has custom fields for this

### 3. Build Implementation Plan for Description

Format the scoped details from conversation as Atlassian Document:

```javascript
{
  type: "doc",
  version: 1,
  content: [
    {
      type: "heading",
      attrs: { level: 2 },
      content: [{ type: "text", text: "Implementation Plan" }]
    },
    {
      type: "paragraph",
      content: [
        { type: "text", text: "Approach: ", marks: [{ type: "strong" }] },
        { type: "text", text: "[approach summary]" }
      ]
    },
    // ... rest of plan
  ]
}
```

**Include:**
- Approach (2-3 sentences)
- Files to modify (bullet list)
- Complexity & estimate
- Dependencies
- Risks & concerns
- Testing approach
- Acceptance criteria

### 4. Update Jira Ticket

Execute update with confirmed fields:

```javascript
// Update description, status, and any confirmed field changes
const updates = {
  fields: {
    description: [formatted implementation plan],
    // Only include fields that changed:
    ...(priorityChanged && { priority: { name: newPriority } }),
    ...(labelsChanged && { labels: newLabels }),
    ...(assigneeChanged && { assignee: { accountId: newAssignee } })
  }
};

// Transition to SCOPED
await transitionIssue(ticketKey, "SCOPED");

// Add comment
await addComment(ticketKey, "Moved to SCOPED - implementation plan added to description");
```

### 5. Confirm Success

```
"‚úÖ CRM-19 moved to SCOPED

Updated:
‚Ä¢ Description: Implementation plan added
‚Ä¢ Status: TO DO ‚Üí SCOPED
‚Ä¢ Priority: Medium ‚Üí High (updated)
‚Ä¢ Labels: frontend, performance (added)

üîó https://fuechecmark.atlassian.net/browse/CRM-19

Ready to start implementation!"
```

## Implementation Plan Format

Use this structure for the description update:

```markdown
## Implementation Plan

**Approach:**
[2-3 sentence summary of approach]

**Files to Modify:**
‚Ä¢ `path/to/file1.js` - [what changes]
‚Ä¢ `path/to/file2.js` - [what changes]

**Complexity:** [Low/Medium/High]
**Estimate:** [X-Y hours]

**Dependencies:**
[List or "None"]

**Risks:**
‚Ä¢ [Risk 1]
‚Ä¢ [Risk 2]

**Testing:**
[Testing approach summary]

**Acceptance Criteria:**
‚Ä¢ [Criterion 1]
‚Ä¢ [Criterion 2]
‚Ä¢ [Criterion 3]
```

## Example Flow

```
User: "move to scoped"

AI: "Current state of CRM-19:

üìã Title: Add keyboard shortcut hints to UI
üéØ Status: TO DO
‚ö° Priority: Medium
üè∑Ô∏è  Labels: frontend
üë§ Assignee: Unassigned

Before moving to SCOPED, let's confirm:

1. Title looks good ‚úì
2. Priority: Medium - matches Low complexity, good ‚úì
3. Labels: Just 'frontend' - should we add 'ui' or keep minimal?"

User: "keep it minimal"

AI: "Got it. Assignee: currently unassigned. Keep it that way?"

User: "yes"

AI: "Perfect. Moving CRM-19 to SCOPED with implementation plan...

‚úÖ CRM-19 moved to SCOPED

Updated:
‚Ä¢ Description: Full implementation plan added
‚Ä¢ Status: TO DO ‚Üí SCOPED
‚Ä¢ Comment: 'Moved to SCOPED - implementation plan in description'

No field changes needed - everything was correct.

üîó https://fuechecmark.atlassian.net/browse/CRM-19"
```

## Field Validation Rules

### Priority Alignment
- Low complexity + 1-3 hours ‚Üí Low or Medium priority
- Medium complexity + 3-10 hours ‚Üí Medium priority
- High complexity + 10+ hours ‚Üí Medium or High priority
- Bugs always ‚Üí High priority (regardless of complexity)

### Label Suggestions
Based on files in plan:
- `src/components/` ‚Üí frontend
- `src/services/` ‚Üí backend
- `src/services/ai/` ‚Üí ai
- `src/hooks/` ‚Üí frontend
- Canvas/Konva ‚Üí canvas
- Firebase ‚Üí backend
- Tests ‚Üí testing
- Cache/optimization ‚Üí performance

### Assignee Options
- User's Jira account
- "Unassigned" (for later assignment)
- Specific teammate (if mentioned)

## Error Handling

### Ticket Not Found
```
"‚ùå Couldn't find CRM-19. Did you mean a different ticket?"
```

### Already SCOPED
```
"CRM-19 is already in SCOPED status. 
Current description shows implementation plan from [date].
Want to update it with new details?"
```

### Transition Failed
```
"‚úÖ Updated ticket fields
‚ùå Couldn't transition TO DO ‚Üí SCOPED
   Available transitions: [list]
   
Manual step needed: Change status in Jira UI"
```

## Script Template

```javascript
node << 'EOF'
import('dotenv').then(async dotenv => {
  dotenv.default.config();
  
  const JIRA_HOST = process.env.JIRA_HOST;
  const JIRA_EMAIL = process.env.JIRA_EMAIL;
  const JIRA_API_TOKEN = process.env.JIRA_API_TOKEN;
  const auth = Buffer.from(`${JIRA_EMAIL}:${JIRA_API_TOKEN}`).toString('base64');
  
  const ticketKey = "[TICKET_KEY]";
  
  // Format implementation plan as Atlassian Document
  const description = {
    type: "doc",
    version: 1,
    content: [
      {
        type: "heading",
        attrs: { level: 2 },
        content: [{ type: "text", text: "Implementation Plan" }]
      },
      {
        type: "paragraph",
        content: [
          { type: "text", text: "Approach: ", marks: [{ type: "strong" }] },
          { type: "text", text: "[APPROACH]" }
        ]
      },
      {
        type: "paragraph",
        content: [
          { type: "text", text: "Files to Modify:", marks: [{ type: "strong" }] }
        ]
      },
      {
        type: "bulletList",
        content: [
          {
            type: "listItem",
            content: [{
              type: "paragraph",
              content: [{ type: "text", text: "[FILE_1]" }]
            }]
          }
          // ... more files
        ]
      },
      {
        type: "paragraph",
        content: [
          { type: "text", text: "Complexity: ", marks: [{ type: "strong" }] },
          { type: "text", text: "[COMPLEXITY]" }
        ]
      },
      {
        type: "paragraph",
        content: [
          { type: "text", text: "Estimate: ", marks: [{ type: "strong" }] },
          { type: "text", text: "[ESTIMATE]" }
        ]
      },
      {
        type: "paragraph",
        content: [
          { type: "text", text: "Testing: ", marks: [{ type: "strong" }] },
          { type: "text", text: "[TESTING]" }
        ]
      },
      {
        type: "paragraph",
        content: [
          { type: "text", text: "Acceptance Criteria:", marks: [{ type: "strong" }] }
        ]
      },
      {
        type: "bulletList",
        content: [
          {
            type: "listItem",
            content: [{
              type: "paragraph",
              content: [{ type: "text", text: "[CRITERION_1]" }]
            }]
          }
          // ... more criteria
        ]
      }
    ]
  };
  
  // Update ticket
  const updateResponse = await fetch(`https://${JIRA_HOST}/rest/api/3/issue/${ticketKey}`, {
    method: 'PUT',
    headers: {
      'Authorization': `Basic ${auth}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      fields: {
        description: description,
        // Include any updated fields
        priority: { name: "[PRIORITY]" },
        labels: ["[LABELS]"]
      }
    })
  });
  
  if (!updateResponse.ok) {
    console.error('‚ùå Failed to update ticket');
    process.exit(1);
  }
  
  // Get available transitions
  const transitionsResponse = await fetch(`https://${JIRA_HOST}/rest/api/2/issue/${ticketKey}/transitions`, {
    headers: { 'Authorization': `Basic ${auth}` }
  });
  const { transitions } = await transitionsResponse.json();
  
  // Find SCOPED transition
  const scopedTransition = transitions.find(t => 
    t.to.name === "SCOPED" || 
    t.name.toLowerCase().includes("scoped") ||
    t.to.name === "Scoped"
  );
  
  if (scopedTransition) {
    // Transition to SCOPED
    await fetch(`https://${JIRA_HOST}/rest/api/2/issue/${ticketKey}/transitions`, {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ transition: { id: scopedTransition.id } })
    });
    
    console.log('‚úÖ Status: TO DO ‚Üí SCOPED');
  } else {
    console.log('‚ö†Ô∏è  No SCOPED transition found. Available transitions:');
    transitions.forEach(t => console.log(`   - ${t.name} ‚Üí ${t.to.name}`));
  }
  
  // Add comment
  await fetch(`https://${JIRA_HOST}/rest/api/3/issue/${ticketKey}/comment`, {
    method: 'POST',
    headers: {
      'Authorization': `Basic ${auth}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      body: {
        type: "doc",
        version: 1,
        content: [{
          type: "paragraph",
          content: [{
            type: "text",
            text: "Moved to SCOPED - implementation plan added to description"
          }]
        }]
      }
    })
  });
  
  console.log(`‚úÖ ${ticketKey} moved to SCOPED`);
  console.log(`üîó https://${JIRA_HOST}/browse/${ticketKey}`);
});
EOF
```

---

**Remember:** This rule handles the Jira update action. The scoping conversation rule just gathers information - this rule applies it.
