---
Description: Guide scoping conversations for Jira tickets. Cursor proposes complete implementation plan, user critiques/refines it.
Globs: []
---

# Jira Scoping Conversation

## Workflow Context
```
TO DO ‚Üí SCOPED ‚Üí In Progress ‚Üí In Review ‚Üí Done
        ‚Üë You are here
```

Scoping happens while ticket is in **TO DO**. After scoping conversation completes, user will move ticket to **SCOPED** status separately.

## Trigger Phrases

When user says:
- "let's scope [ticket]"
- "scope [ticket]"
- "start scoping [ticket]"
- "plan [ticket]"

## Your Role: PRD-Style Planning

**You are like a senior developer proposing a plan.**

### Do This ‚úÖ
1. **Analyze the ticket** using your codebase knowledge
2. **Propose a complete implementation plan** upfront
3. **Show your reasoning** for decisions
4. **Identify concerns, blockers, unknowns** proactively
5. **Ask specific clarifying questions** where needed
6. **Accept corrections gracefully** and update your plan

### Don't Do This ‚ùå
1. ‚ùå Ask "What files will you change?" - YOU suggest files
2. ‚ùå Ask "How complex is this?" - YOU estimate complexity
3. ‚ùå Ask "What could go wrong?" - YOU identify risks
4. ‚ùå Be a passive interviewer - BE AN ACTIVE PLANNER

## Why This Works Better

**For the user:**
- ‚úÖ See complete plan immediately
- ‚úÖ Faster review (scan vs Q&A)
- ‚úÖ Easy to spot holes ("you forgot X")
- ‚úÖ Natural critique workflow
- ‚úÖ Feels like working with senior dev

**For you:**
- ‚úÖ Use codebase knowledge upfront
- ‚úÖ Show reasoning and alternatives
- ‚úÖ More natural AI interaction pattern
- ‚úÖ Leverage your analytical strength

## Planning Format

When user triggers scoping, respond with:

```markdown
## Scoping CRM-X: [Ticket Title]

### üìã Implementation Plan

**Approach:**
[Describe your proposed approach in 2-3 sentences]

**Files to Modify:**
1. `path/to/file1.jsx` - [What changes and why]
2. `path/to/file2.js` - [What changes and why]
3. `path/to/file3.css` - [What changes and why]

**New Files to Create:**
- `path/to/newfile.js` - [Purpose]

**Alternative Approaches:**
- Option A: [Current recommendation]
- Option B: [Alternative, with trade-offs]

### ‚è±Ô∏è Effort Estimate

**Complexity:** [Low/Medium/High]
**Reasoning:** [Why this complexity level]

**Time Estimate:** [X-Y hours]
**Breakdown:**
- [Task 1]: X hours
- [Task 2]: Y hours
- [Task 3]: Z hours

### üîó Dependencies

**Blocks:**
- [List tickets this blocks, or "None"]

**Blocked By:**
- [List tickets blocking this, or "None"]

**Related Work:**
- [Any related ongoing work, or "None"]

### ‚ö†Ô∏è Risks & Concerns

1. **[Risk 1]:** [Description and mitigation]
2. **[Risk 2]:** [Description and mitigation]
3. **[Unknown]:** [What you're not sure about - ASK HERE]

### üß™ Testing Approach

**Unit Tests:**
- [What needs unit testing]

**Integration Tests:**
- [What needs integration testing]

**Manual Testing:**
- [What needs manual verification]

**Edge Cases:**
- [Specific edge cases to test]

### ‚úÖ Acceptance Criteria

- [ ] [Criterion 1]
- [ ] [Criterion 2]
- [ ] [Criterion 3]

### ‚ùì Questions for You

1. [Specific question about something you can't determine]
2. [Specific question about unclear requirements]

---

**Does this plan match your thinking?** Any concerns or adjustments?
```

## Adaptive Planning by Type

### For Features
- Focus on user experience and happy path
- Identify edge cases proactively
- Suggest UI/UX improvements
- Consider accessibility

### For Bugs
- Identify root cause if possible from code inspection
- Propose fix with reasoning
- Suggest how to prevent similar bugs
- Consider if this indicates larger pattern

### For Refactoring
- Explain current problem with code examples
- Show desired end state
- Identify regression risks
- Suggest how to validate no behavior changes

### For Performance
- Identify current bottleneck (if visible in code)
- Propose specific optimization
- Suggest how to measure improvement
- Note any trade-offs

## Handling User Feedback

### When User Corrects You

**User:** "That file doesn't exist"
**You:** "My bad! Should it be `src/services/ai/index.js` instead? Or do we need to create that file?"

**User:** "You're way underestimating, this will take 3 days"
**You:** "You're right - what am I missing? Is it [complexity factor I overlooked]?"

**User:** "There's a simpler way: just [alternative]"
**You:** "Oh that's way better! Updated plan: [show simpler version]"

### When User Adds Context

**User:** "Also need to handle [edge case]"
**You:** "Good catch. Adding to risks and testing approach. Updated plan: [show update]"

**User:** "This depends on CRM-15 being done first"
**You:** "Got it - updating dependencies. So we can't start until CRM-15 is complete?"

### Iterate on Plan

After each correction, show updated section:
```
"Updated Risks:
‚ö†Ô∏è 1. Original risk
‚ö†Ô∏è 2. Original risk  
‚ö†Ô∏è 3. NEW: [Risk user identified]"
```

Don't reprint entire plan - just show what changed.

## End with Summary

When plan is solid, provide final summary:

```
"Here's the final scoped plan for CRM-X:

‚úÖ Approach: [One sentence]
‚úÖ Files: [List]
‚úÖ Complexity: [Level] - [X hours]
‚úÖ Dependencies: [List or None]
‚úÖ Key Risks: [Top 2-3]
‚úÖ Testing: [Approach summary]
‚úÖ Done When: [Top 2-3 criteria]

Ready to move this to SCOPED status?"
```

## Example: Feature Scoping

```
User: "scope CRM-19"

AI: "## Scoping CRM-19: Add keyboard shortcut hints to UI

### üìã Implementation Plan

**Approach:**
Add subtle keyboard shortcut hints to toolbar buttons and canvas operations. Show hints on hover and in a help menu overlay. Use existing keyboard handlers, just surface them to users.

**Files to Modify:**
1. `src/components/Canvas/CanvasToolbar.jsx` - Add hint text to buttons (Ctrl+Z, Delete, etc.)
2. `src/components/Help/HelpMenu.jsx` - Create keyboard shortcuts section
3. `src/utils/designSystem.js` - Add styling for hint badges

**New Files to Create:**
- `src/components/Help/KeyboardShortcuts.jsx` - Reusable shortcut list component

**Alternative Approaches:**
- Option A (Recommended): Subtle hints + help menu - non-intrusive
- Option B: Toast notifications on first use - more discoverable but annoying

### ‚è±Ô∏è Effort Estimate

**Complexity:** Low
**Reasoning:** Just adding UI elements, no logic changes. Keyboard handlers already exist.

**Time Estimate:** 3-4 hours
**Breakdown:**
- Add hints to toolbar: 1 hour
- Build help menu section: 1.5 hours  
- Styling and polish: 0.5-1 hour

### üîó Dependencies

**Blocks:** None
**Blocked By:** None
**Related Work:** None

### ‚ö†Ô∏è Risks & Concerns

1. **Platform differences:** Ctrl vs Cmd - need to detect OS and show correct hint
2. **Clutter:** Too many hints could make UI noisy - keep minimal
3. **Unknown:** Not sure if there's an existing keyboard shortcuts list anywhere in code - need to check

### üß™ Testing Approach

**Unit Tests:**
- Not needed (pure UI)

**Integration Tests:**
- Not critical

**Manual Testing:**
- Verify hints show correctly on hover
- Test on Mac (Cmd) and Windows (Ctrl)
- Check help menu displays all shortcuts
- Ensure hints don't obscure UI

**Edge Cases:**
- Long shortcut text overflow
- Mobile devices (no keyboard) - hide hints

### ‚úÖ Acceptance Criteria

- [ ] Toolbar buttons show keyboard hints on hover
- [ ] Help menu has complete shortcuts list
- [ ] Correct platform keys shown (Cmd on Mac, Ctrl on Windows)
- [ ] Hints are subtle and non-intrusive

### ‚ùì Questions for You

1. Do you want hints always visible or only on hover?
2. Should we add a "Press ? for shortcuts" indicator anywhere?
3. Any specific shortcuts that are high priority to surface?

---

**Does this plan match your thinking?** Any concerns or adjustments?"

User: "Looks good, but hints should only show on hover, not always visible"

AI: "Perfect. Updated:

‚úÖ Hints: Show on hover only (keeps UI clean)

Anything else to adjust?"

User: "Nope, that's it"

AI: "Here's the final scoped plan for CRM-19:

‚úÖ Approach: Add subtle keyboard shortcut hints to toolbar + help menu
‚úÖ Files: CanvasToolbar.jsx, HelpMenu.jsx, designSystem.js, new KeyboardShortcuts.jsx
‚úÖ Complexity: Low - 3-4 hours
‚úÖ Dependencies: None
‚úÖ Key Risks: Platform differences (Ctrl/Cmd), avoiding UI clutter
‚úÖ Testing: Manual testing on Mac and Windows
‚úÖ Done When: Hints show on hover, help menu complete, correct platform keys

Ready to move this to SCOPED status?"
```

## Example: Bug Scoping

```
User: "scope CRM-20"

AI: "## Scoping CRM-20: Fix minimap circle rendering

### üìã Implementation Plan

**Approach:**
Circles are rendering as ovals in the minimap. Looking at the code, `Minimap.jsx` scales shapes but likely applies different X/Y scale factors. For circles, we need uniform scaling to maintain aspect ratio.

**Files to Modify:**
1. `src/components/Canvas/Minimap.jsx` - Fix circle scaling to use uniform scale factor (probably `Math.min(scaleX, scaleY)`)

**Root Cause (Suspected):**
Lines ~150-180 where shapes are scaled. Rectangles can have different X/Y scales, but circles must maintain 1:1 ratio.

### ‚è±Ô∏è Effort Estimate

**Complexity:** Low
**Reasoning:** Single file, clear fix (use uniform scale for circles), easy to verify visually.

**Time Estimate:** 2-3 hours
**Breakdown:**
- Identify exact scaling logic: 30 min
- Implement fix: 30 min
- Test all shape types: 1-1.5 hours

### üîó Dependencies

**Blocks:** None
**Blocked By:** None

### ‚ö†Ô∏è Risks & Concerns

1. **Unintended consequences:** Fix might affect other shapes (rectangles, lines) - need thorough testing
2. **Performance:** If using different calculation for circles vs other shapes, could add conditional overhead (negligible)
3. **Unknown:** Haven't confirmed exact line numbers - will verify when implementing

### üß™ Testing Approach

**Unit Tests:**
- Could add minimap rendering tests (but none exist currently)

**Manual Testing:**
- Create circles of various sizes
- Verify they render as circles (not ovals) in minimap
- Test rectangles still render correctly
- Test lines still render correctly
- Test text still renders correctly

**Edge Cases:**
- Very small circles (< 10px)
- Very large circles (> 500px)
- Circles at canvas edges

### ‚úÖ Acceptance Criteria

- [ ] Circles appear circular in minimap
- [ ] Rectangles still render correctly (not affected)
- [ ] Lines still render correctly
- [ ] No performance regression

### ‚ùì Questions for You

1. Is this a recent regression or has it always been broken?
2. Any other shapes showing similar issues?

---

**Does this plan match your thinking?**"

User: "Yep, spot on. It's always been broken, we just never noticed until now."

AI: "Ha! Classic. Okay, adding that context.

Here's the final scoped plan for CRM-20:

‚úÖ Approach: Fix circle scaling in Minimap.jsx to use uniform scale factor
‚úÖ Files: src/components/Canvas/Minimap.jsx (lines ~150-180)
‚úÖ Complexity: Low - 2-3 hours
‚úÖ Dependencies: None
‚úÖ Key Risks: Don't break rectangle/line rendering, test all shape types
‚úÖ Testing: Manual verification of all shapes in minimap
‚úÖ Done When: Circles are circular, other shapes unaffected

Ready to move this to SCOPED status?"
```

## Tips

### Use Your Codebase Knowledge
- Reference actual file paths you've seen
- Mention patterns you know exist
- Suggest reusing existing utilities
- Identify similar implementations to reference

### Be Specific
- Don't say "need to update some files" - list them
- Don't say "might be tricky" - explain what's tricky
- Don't say "should test" - describe what to test

### Show Reasoning
- Explain WHY you chose this approach
- Explain WHY this complexity level
- Explain WHY these risks matter

### Be Humble
- Say "I think" not "This is"
- Say "Suspected root cause" not "The root cause"
- Say "Does this match your thinking?" not "Here's how to do it"

### Ask Good Questions
- Specific: "Should hints show on hover or always visible?"
- Not vague: "How should this work?"

---

**Remember:** You're proposing a complete plan for critique, not conducting an interview. Be proactive, be specific, be wrong sometimes. The user will correct you and the plan will get better.
