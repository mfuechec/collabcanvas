---
alwaysApply: true
---
## DRY Principles - Essential Guidelines

### Where to Put Functions

- **Canvas/Shape Operations** → `utils/canvas.js` or `utils/shapes/`
- **Geometry/Math** → `utils/geometry.js`
- **Shape Matching/Search** → `utils/shapeMatching.js`
- **Validation** → `utils/validation.js`
- **Constants** → `utils/constants.js` or `utils/designSystem.js`
- **Firebase Operations** → `services/*.js`
- **React State Logic** → `hooks/*.js`

### Core Rules

1. **Extract at 2** - If logic appears 2+ times, extract to utils/
2. **Single Responsibility** - Each function does ONE thing well
3. **Max 50 lines** - Break larger functions into smaller ones
4. **Pure functions preferred** - Avoid side effects when possible
5. **One source of truth** - Constants and utilities have ONE definition
6. **Preserve behavior** - Refactoring must NEVER change functionality

### When NOT to Extract (Acceptable Duplication)

❌ **Don't unify if:**
- Different purposes/domains (even if code looks similar)
- Different error handling patterns
- Different timing (immediate vs debounced)
- Different state dependencies
- Over-abstraction would hurt readability

✅ **Examples that should stay separate:**
```javascript
// Different domains
function createCanvasShape(type, props) {
  return { ...props, id: generateId(), canvasId: currentCanvas };
}
function createPreviewShape(type, props) {
  return { ...props, id: tempId(), isPreview: true };
}

// Different error handling
try { updateShape(id, props) } catch { /* ignore */ }  // Component A
try { updateShape(id, props) } catch (err) { showError(err) }  // Component B

// Different timing
onDragMove = () => { updatePosition(x, y); }  // Immediate
onDragMove = debounce(() => { updatePosition(x, y); }, 100)  // Debounced
```

### Naming Conventions

**Functions:**
- Prefix with verb: `createShape`, `updatePosition`, `findShape`
- Be specific: `getShapeById` not `get`
- Boolean: `isWithinCanvas`, `hasPermission`, `canEdit`

**Files:**
- Lowercase: `shapeFactory.js`, `geometry.js`
- Match content: if exporting `createShape`, name it `shapeFactory.js` not `utils.js`

**Constants:**
- SCREAMING_SNAKE_CASE: `CANVAS_WIDTH`, `DEFAULT_COLOR`

### Before Writing Code - Quick Checklist

- [ ] Does this function exist in `utils/`?
- [ ] Can I use an existing hook?
- [ ] Should this be in a service?
- [ ] Am I using constants or magic numbers?
- [ ] Is this calculation duplicated elsewhere?

### Quick Reference: Where Does It Go?

- Shape logic? → `utils/shapes/` or `utils/shapeFactory.js`
- Math/geometry? → `utils/geometry.js`
- Constants? → `utils/constants.js`
- React state? → `hooks/useXxx.js`
- Firebase? → `services/xxx.js`
- Validation? → `utils/validation.js`
- AI helpers? → `utils/shapeMatching.js`

---

**Remember**: Clean, DRY code is maintainable code. But never sacrifice correctness for DRY—preserve all functionality!
