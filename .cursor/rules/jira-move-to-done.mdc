---
Description: Move Jira ticket from In Review to Done. Deletes preview channel, merges to main, deploys to production, cleans up branch.
Globs: scripts/jira/*.js, deploy-*.sh, .git/config
---

# Move Ticket to Done

## Workflow Context
```
TO DO → SCOPED → In Progress → In Review → Done
                                           ↑ Moving here
```

## Trigger Phrases

When user says:
- "move to done"
- "move [ticket] to done"
- "production ready"
- "ready for production"
- "deploy to production"
- "mark as done"

## Process

### 1. Verify Ticket State

**Extract ticket key from current branch:**
```bash
# Get current branch name
git branch --show-current
# Example: CRM-19-keyboard-shortcuts → CRM-19
```

**Fetch ticket status:**
```javascript
const ticket = await fetchTicket(ticketKey);
const currentStatus = ticket.fields.status.name;

if (currentStatus !== "In Review") {
  console.log(`⚠️  ${ticketKey} is in ${currentStatus}, not "In Review"`);
  console.log("Can only move to Done from In Review.");
  return;
}
```

### 2. Ensure All Changes Are Committed

**Check git status:**
```bash
git status --porcelain
```

**If uncommitted changes exist:**
```
"You have uncommitted changes. Committing now...

git add -A
git commit -m "Final changes for [TICKET-KEY]"
git push origin [BRANCH-NAME]
```

### 3. Delete Firebase Preview Channel

**Channel name:** Lowercase ticket key (e.g., `crm-19`)

```bash
firebase hosting:channel:delete crm-19 --force
```

**Expected output:**
```
✔ Channel crm-19 has been deleted.
```

**If channel doesn't exist:**
```
⚠️  Channel not found (may have been manually deleted)
Continuing...
```

### 4. Merge to Main

**Switch to main and pull latest:**
```bash
git checkout main
git pull origin main
```

**Merge feature branch with no-fast-forward:**
```bash
git merge CRM-19-keyboard-shortcuts --no-ff -m "Merge CRM-19: Add keyboard shortcut hints to UI

- Polish existing tooltip shortcuts with badge styling
- Platform detection for Ctrl/Cmd display
- Updated designSystem.js with keyboard hint styles
- Enhanced CanvasToolbar.jsx tooltips

Closes CRM-19"
```

**Commit message format:**
```
Merge [TICKET-KEY]: [Title]

- [Key change 1]
- [Key change 2]
- [Key change 3]

Closes [TICKET-KEY]
```

**Push to main:**
```bash
git push origin main
```

### 5. Deploy to Production

**Build and deploy:**
```bash
npm run build
npm run deploy
```

**Or use combined script:**
```bash
./deploy-production.sh
```

**Expected output:**
```
✔ Deploy complete!

Project Console: https://console.firebase.google.com/...
Hosting URL: https://collabcanvas-5b9fb.web.app
```

### 6. Update Jira Ticket

**Transition to Done:**
```javascript
const transitions = await getTransitions(ticketKey);
const doneTransition = transitions.find(t => 
  t.to.name === "Done" || 
  t.name.toLowerCase().includes("done") ||
  t.name.toLowerCase().includes("complete")
);

if (doneTransition) {
  await transitionIssue(ticketKey, doneTransition.id);
  console.log('✅ Status: In Review → Done');
}
```

**Add completion comment:**
```javascript
await addComment(ticketKey, {
  type: "doc",
  version: 1,
  content: [
    {
      type: "paragraph",
      content: [
        { type: "text", text: "✅ Deployed to Production", marks: [{ type: "strong" }] }
      ]
    },
    {
      type: "paragraph",
      content: [
        { type: "text", text: "Production URL: " },
        { 
          type: "text", 
          text: "https://collabcanvas-5b9fb.web.app",
          marks: [{ type: "link", attrs: { href: "https://collabcanvas-5b9fb.web.app" } }]
        }
      ]
    },
    {
      type: "paragraph",
      content: [
        { type: "text", text: "Merged to main and preview channel deleted." }
      ]
    }
  ]
});
```

### 7. Clean Up Feature Branch

**Delete local branch:**
```bash
git branch -d CRM-19-keyboard-shortcuts
```

**Delete remote branch:**
```bash
git push origin --delete CRM-19-keyboard-shortcuts
```

**Confirmation:**
```
✅ Branch deleted locally and remotely
```

### 8. Show Completion Summary

```
✅ CRM-19: Add keyboard shortcut hints to UI

Completed:
• Preview channel deleted
• Merged to main
• Deployed to production
• Status: In Review → Done
• Branch cleaned up

🔗 Production: https://collabcanvas-5b9fb.web.app
🔗 Jira: https://fuechecmark.atlassian.net/browse/CRM-19

You're now on main branch. Ready for the next ticket!
```

## Implementation Script Template

```javascript
node << 'EOF'
import('dotenv').then(async dotenv => {
  dotenv.default.config();
  const { execSync } = require('child_process');
  
  const JIRA_HOST = process.env.JIRA_HOST;
  const JIRA_EMAIL = process.env.JIRA_EMAIL;
  const JIRA_API_TOKEN = process.env.JIRA_API_TOKEN;
  const auth = Buffer.from(`${JIRA_EMAIL}:${JIRA_API_TOKEN}`).toString('base64');
  
  try {
    // 1. Get current branch and extract ticket key
    const branchName = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
    const ticketMatch = branchName.match(/^([A-Z]+-\d+)/);
    
    if (!ticketMatch) {
      console.log('⚠️  Could not extract ticket key from branch name');
      console.log(`Current branch: ${branchName}`);
      console.log('Expected format: CRM-19-description');
      process.exit(1);
    }
    
    const ticketKey = ticketMatch[1];
    const channelName = ticketKey.toLowerCase();
    
    console.log(`Processing ${ticketKey}...\n`);
    
    // 2. Verify ticket is in "In Review"
    const ticketResponse = await fetch(
      `https://${JIRA_HOST}/rest/api/3/issue/${ticketKey}?fields=status,summary`,
      { headers: { 'Authorization': `Basic ${auth}` } }
    );
    const ticket = await ticketResponse.json();
    const currentStatus = ticket.fields.status.name;
    
    if (currentStatus !== "In Review") {
      console.log(`⚠️  ${ticketKey} is in ${currentStatus}, not "In Review"`);
      console.log('Can only move to Done from In Review.');
      process.exit(1);
    }
    
    console.log(`✅ Verified: ${ticketKey} is in In Review\n`);
    
    // 3. Check for uncommitted changes
    const gitStatus = execSync('git status --porcelain', { encoding: 'utf8' });
    if (gitStatus.trim()) {
      console.log('Committing final changes...');
      execSync('git add -A');
      execSync(`git commit -m "Final changes for ${ticketKey}"`);
      execSync(`git push origin ${branchName}`);
      console.log('✅ Changes committed and pushed\n');
    }
    
    // 4. Delete preview channel
    console.log(`Deleting preview channel: ${channelName}...`);
    try {
      execSync(`firebase hosting:channel:delete ${channelName} --force`, { stdio: 'inherit' });
      console.log('✅ Preview channel deleted\n');
    } catch (err) {
      console.log('⚠️  Preview channel not found or already deleted\n');
    }
    
    // 5. Merge to main
    console.log('Merging to main...');
    execSync('git checkout main', { stdio: 'inherit' });
    execSync('git pull origin main', { stdio: 'inherit' });
    
    const mergeMessage = `Merge ${ticketKey}: ${ticket.fields.summary}\n\nCloses ${ticketKey}`;
    execSync(`git merge ${branchName} --no-ff -m "${mergeMessage}"`, { stdio: 'inherit' });
    execSync('git push origin main', { stdio: 'inherit' });
    console.log('✅ Merged to main\n');
    
    // 6. Deploy to production
    console.log('Deploying to production...');
    execSync('npm run build', { stdio: 'inherit' });
    execSync('firebase deploy --only hosting', { stdio: 'inherit' });
    console.log('✅ Deployed to production\n');
    
    // 7. Update Jira
    console.log('Updating Jira...');
    
    // Get transitions
    const transitionsResponse = await fetch(
      `https://${JIRA_HOST}/rest/api/2/issue/${ticketKey}/transitions`,
      { headers: { 'Authorization': `Basic ${auth}` } }
    );
    const { transitions } = await transitionsResponse.json();
    
    const doneTransition = transitions.find(t => 
      t.to.name === "Done" || 
      t.name.toLowerCase().includes("done") ||
      t.name.toLowerCase().includes("complete")
    );
    
    if (!doneTransition) {
      console.log('⚠️  No "Done" transition found');
      console.log('Available:', transitions.map(t => t.to.name).join(', '));
      process.exit(1);
    }
    
    // Transition to Done
    await fetch(`https://${JIRA_HOST}/rest/api/2/issue/${ticketKey}/transitions`, {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ transition: { id: doneTransition.id } })
    });
    console.log('✅ Status: In Review → Done');
    
    // Add completion comment
    await fetch(`https://${JIRA_HOST}/rest/api/3/issue/${ticketKey}/comment`, {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        body: {
          type: "doc",
          version: 1,
          content: [
            {
              type: "paragraph",
              content: [
                { type: "text", text: "✅ Deployed to Production", marks: [{ type: "strong" }] }
              ]
            },
            {
              type: "paragraph",
              content: [
                { type: "text", text: "Production URL: " },
                { 
                  type: "text", 
                  text: "https://collabcanvas-5b9fb.web.app",
                  marks: [{ type: "link", attrs: { href: "https://collabcanvas-5b9fb.web.app" } }]
                }
              ]
            },
            {
              type: "paragraph",
              content: [
                { type: "text", text: "Merged to main and preview channel deleted." }
              ]
            }
          ]
        }
      })
    });
    console.log('✅ Added completion comment\n');
    
    // 8. Clean up branch
    console.log('Cleaning up feature branch...');
    execSync(`git branch -d ${branchName}`, { stdio: 'inherit' });
    execSync(`git push origin --delete ${branchName}`, { stdio: 'inherit' });
    console.log('✅ Branch deleted\n');
    
    // Success summary
    console.log('━'.repeat(60));
    console.log(`✅ ${ticketKey} completed and deployed to production\n`);
    console.log(`🔗 Production: https://collabcanvas-5b9fb.web.app`);
    console.log(`🔗 Jira: https://${JIRA_HOST}/browse/${ticketKey}`);
    console.log('━'.repeat(60));
    console.log('\nYou\'re now on main branch. Ready for the next ticket!');
    
  } catch (error) {
    console.error('❌ Error:', error.message);
    process.exit(1);
  }
});
EOF
```

## Example Flow

```
User: "production ready"

AI: "Processing CRM-19...
✅ Verified: CRM-19 is in In Review

Deleting preview channel: crm-19...
✅ Preview channel deleted

Merging to main...
✅ Merged to main

Deploying to production...
[build output]
✅ Deployed to production

Updating Jira...
✅ Status: In Review → Done
✅ Added completion comment

Cleaning up feature branch...
✅ Branch deleted

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✅ CRM-19 completed and deployed to production

🔗 Production: https://collabcanvas-5b9fb.web.app
🔗 Jira: https://fuechecmark.atlassian.net/browse/CRM-19
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

You're now on main branch. Ready for the next ticket!"
```

## Error Handling

### Not in "In Review"
```
"⚠️  CRM-19 is currently in In Progress, not In Review.
Can only move to Done from In Review.
Need to deploy for review first?"
```

### Build Failure
```
"❌ Build failed:

[error output]

Fix the build errors before deploying to production.
Stopping process."
```

### Merge Conflicts
```
"❌ Merge conflict detected:

[conflicting files]

Please resolve conflicts manually:
1. git checkout main
2. git merge CRM-19-keyboard-shortcuts
3. Resolve conflicts
4. git commit
5. Say 'production ready' again"
```

### Deployment Failure
```
"❌ Firebase deployment failed:

[error output]

Main branch has been updated but deployment failed.
Investigate and run 'npm run deploy' manually."
```

### No "Done" Transition
```
"⚠️  No 'Done' transition found in Jira.
Available transitions: Back to To Do, Blocked

Your Jira workflow may not have a 'Done' status from In Review."
```

### Branch Doesn't Match Pattern
```
"⚠️  Could not extract ticket key from branch name.
Current branch: feature/new-ui
Expected format: CRM-19-description

Switch to a ticket branch first."
```

## Additional Notes

### Deployment Strategy
- Always deploy from `main` after merge
- Ensures production matches what's in main
- Preview channel deleted before deploy to avoid confusion

### Branch Cleanup
- **MANDATORY** - Always delete feature branches after production deployment
- Keeps repository clean
- Prevents accidental work on old branches

### Rollback Strategy
If deployment fails:
1. Production still has previous version (safe)
2. Main has new code (but not deployed)
3. Can revert main commit if needed: `git revert HEAD`
4. Or fix issue and redeploy: `npm run deploy`

### Firebase Preview Channel Cleanup
- Channels expire after 999 days if not manually deleted
- Always delete when moving to Done to avoid accumulation
- Can manually check: `firebase hosting:channel:list`

### Post-Deployment
After successful deployment:
- You're on `main` branch
- Feature branch is deleted
- Ready to start next ticket
- Production is updated

---

**Remember:** This is the final step in the workflow. Only use when code has been reviewed and tested in the preview environment.
