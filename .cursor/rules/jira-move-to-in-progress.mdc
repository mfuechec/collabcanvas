---
Description: Move Jira ticket from SCOPED to In Progress. Creates feature branch, updates Jira, shows condensed plan recap.
Globs: scripts/jira/*.js
---

# Move Ticket to In Progress

## Workflow Context
```
TO DO ‚Üí SCOPED ‚Üí In Progress ‚Üí In Review ‚Üí Done
                 ‚Üë Moving here
```

## Trigger Phrases

When user says:
- "move to in progress"
- "move [ticket] to in progress"
- "start [ticket]"
- "begin work on [ticket]"

## Process

### 1. Prepare Git Branch

**Pull latest main:**
```bash
git checkout main
git pull origin main
```

**Create feature branch:**
Format: `[TICKET-KEY]-[brief-description]`

Examples:
- `CRM-19-keyboard-shortcuts`
- `CRM-20-fix-minimap-circles`
- `CRM-21-ai-caching`

**Brief description guidelines:**
- Lowercase, hyphen-separated
- 2-4 words max
- Focus on the "what" not the "how"
- Keep under 40 characters total

```bash
git checkout -b CRM-19-keyboard-shortcuts
```

**Set terminal tab title:**
```bash
printf '\033]0;CRM-19: Add keyboard shortcuts\007'
```

This names the current terminal tab with the ticket key and title for easy identification.

### 2. Update Jira Ticket

**Transition to In Progress:**
```javascript
// Change status
await transitionIssue(ticketKey, "In Progress");

// Assign to user (if unassigned)
await assignIssue(ticketKey, currentUser);

// Add comment with branch info
await addComment(ticketKey, 
  `Started work on branch: \`CRM-19-keyboard-shortcuts\``
);
```

### 3. Show Condensed Implementation Plan

Format:
```
üìã [TICKET-KEY]: [Title]

Quick Recap:
‚Ä¢ [One-line approach summary]
‚Ä¢ Files: [file1.js, file2.js]
‚Ä¢ [X-Y hours, Complexity level]
‚Ä¢ [Key technical note if any]

Ready to start implementing?
```

**Example:**
```
üìã CRM-19: Add keyboard shortcut hints to UI

Quick Recap:
‚Ä¢ Polish existing tooltip shortcuts with badge styling
‚Ä¢ Files: CanvasToolbar.jsx, designSystem.js
‚Ä¢ 2-3 hours, Low complexity
‚Ä¢ Platform detection for Ctrl/Cmd

Ready to start implementing?
```

### 4. Wait for User Response

**If user says "yes" or "let's go":**
- Acknowledge and let them start coding
- Or ask: "Want me to scaffold it first?"

**If user says "scaffold it" or "set it up":**
- Create any new files mentioned in plan
- Add basic structure/imports
- Make initial commit

**If user says specific instruction:**
- Follow their lead

## Implementation

### Script Template

```javascript
node << 'EOF'
import('dotenv').then(async dotenv => {
  dotenv.default.config();
  
  const JIRA_HOST = process.env.JIRA_HOST;
  const JIRA_EMAIL = process.env.JIRA_EMAIL;
  const JIRA_API_TOKEN = process.env.JIRA_API_TOKEN;
  const auth = Buffer.from(`${JIRA_EMAIL}:${JIRA_API_TOKEN}`).toString('base64');
  
  const ticketKey = "[TICKET_KEY]";
  const branchName = "[BRANCH_NAME]";
  
  // Get ticket to check current status
  const ticketResponse = await fetch(`https://${JIRA_HOST}/rest/api/3/issue/${ticketKey}?fields=status,assignee`, {
    headers: { 'Authorization': `Basic ${auth}` }
  });
  const ticket = await ticketResponse.json();
  
  console.log(`Current status: ${ticket.fields.status.name}`);
  
  // Get available transitions
  const transitionsResponse = await fetch(`https://${JIRA_HOST}/rest/api/2/issue/${ticketKey}/transitions`, {
    headers: { 'Authorization': `Basic ${auth}` }
  });
  const { transitions } = await transitionsResponse.json();
  
  // Find "In Progress" transition
  const inProgressTransition = transitions.find(t => 
    t.to.name === "In Progress" || 
    t.name.toLowerCase().includes("in progress") ||
    t.name.toLowerCase().includes("start")
  );
  
  if (inProgressTransition) {
    await fetch(`https://${JIRA_HOST}/rest/api/2/issue/${ticketKey}/transitions`, {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ transition: { id: inProgressTransition.id } })
    });
    console.log('‚úÖ Status: SCOPED ‚Üí In Progress');
  } else {
    console.log('‚ö†Ô∏è  No "In Progress" transition found');
    console.log('Available:', transitions.map(t => t.to.name).join(', '));
  }
  
  // Assign to current user if unassigned
  if (!ticket.fields.assignee) {
    await fetch(`https://${JIRA_HOST}/rest/api/3/issue/${ticketKey}/assignee`, {
      method: 'PUT',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        accountId: "[USER_ACCOUNT_ID]" // or use email
      })
    });
    console.log('‚úÖ Assigned to you');
  }
  
  // Add comment with branch name
  await fetch(`https://${JIRA_HOST}/rest/api/3/issue/${ticketKey}/comment`, {
    method: 'POST',
    headers: {
      'Authorization': `Basic ${auth}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      body: {
        type: "doc",
        version: 1,
        content: [{
          type: "paragraph",
          content: [
            { type: "text", text: "Started work on branch: " },
            { type: "text", text: branchName, marks: [{ type: "code" }] }
          ]
        }]
      }
    })
  });
  console.log('‚úÖ Added branch info to ticket');
  console.log(`\nüîó https://${JIRA_HOST}/browse/${ticketKey}`);
});
EOF
```

## Example Flow

```
User: "move CRM-19 to in progress"

AI: [Runs git commands]
"Switched to a new branch 'CRM-19-keyboard-shortcuts'
[Terminal tab title changes to: CRM-19: Add keyboard shortcuts]

Updating Jira...
‚úÖ Status: SCOPED ‚Üí In Progress
‚úÖ Assigned to you
‚úÖ Added branch info

üìã CRM-19: Add keyboard shortcut hints to UI

Quick Recap:
‚Ä¢ Polish existing tooltip shortcuts with badge styling
‚Ä¢ Files: CanvasToolbar.jsx, designSystem.js
‚Ä¢ 2-3 hours, Low complexity
‚Ä¢ Platform detection for Ctrl/Cmd

Ready to start implementing?"

User: "yes"

AI: "Great! You're on branch CRM-19-keyboard-shortcuts.
Starting with CanvasToolbar.jsx - let me know what you want to tackle first!"
```

## Branch Naming Reference

### Good Branch Names:
- ‚úÖ `CRM-19-keyboard-shortcuts` (clear and concise)
- ‚úÖ `CRM-20-fix-minimap-circles` (includes "fix" for bugs)
- ‚úÖ `CRM-21-ai-caching` (short and clear)

### Avoid:
- ‚ùå `CRM-19` (no context)
- ‚ùå `CRM-19-add-keyboard-shortcut-hints-to-toolbar-and-help-menu` (too long)
- ‚ùå `keyboard-shortcuts` (no ticket reference)
- ‚ùå `fix-bug` (vague)

### Naming Tips:
- Keep it under 40 chars total
- Use ticket title as guide, condense it
- For bugs: Include "fix" (e.g., `CRM-20-fix-minimap`)
- For features: Just describe feature (e.g., `CRM-21-user-auth`)
- Remove words like "add", "implement" unless needed for clarity

## Git Flow

```bash
# 1. Get latest code
git checkout main
git pull origin main

# 2. Create feature branch
git checkout -b CRM-19-keyboard-shortcuts

# 3. Work happens here...
# (Jira is already updated at this point)

# 4. When done, push branch
git push origin CRM-19-keyboard-shortcuts
```

## Error Handling

### Already on a branch
```
"You're currently on branch 'CRM-18-other-work'.
Want to:
1. Stash changes and switch
2. Commit current work first
3. Cancel"
```

### Uncommitted changes
```
"You have uncommitted changes.
Want to:
1. Stash them
2. Commit them
3. Cancel"
```

### Ticket not in SCOPED
```
"CRM-19 is currently in [STATUS], not SCOPED.
Can't move to In Progress from this status.
Need to scope it first?"
```

### Branch already exists
```
"Branch 'CRM-19-keyboard-shortcuts' already exists.
Want to:
1. Switch to existing branch
2. Delete and recreate
3. Use different name"
```

## Additional Notes

### Assignment
- Always assign to user when moving to In Progress
- If already assigned to someone else, warn and ask to proceed

### Branch Push
- Don't auto-push the empty branch
- User will push when they have commits

### Jira Link
- Branch name in comment allows Jira to auto-link
- Makes it easy to find code from ticket

---

**Remember:** This sets up the work environment. The actual coding starts after user confirms they're ready.
