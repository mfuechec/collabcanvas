---
description: TODO List Management - Adding, viewing, and managing tasks in TODO.md with automatic agent analysis
globs: []
---

## TODO List Management (Compact Format)

The project uses a compact, human-readable TODO list (`TODO.md` in repo root) with automatic agent analysis. Detailed analysis is stored separately in `.todo-analysis/` to keep TODO.md scannable.

The file watcher (`npm run watch-todos`) automatically analyzes new tasks when added.

---

## Adding Tasks

When user says "add to task list", "add to todo", "create todo for", or similar:

1. **Open TODO.md**
2. **Identify priority section:**
   - 🔴 Critical: Bugs, blockers, security issues, critical features
   - 🟡 Important: Major features, performance improvements, significant tech debt
   - 🟢 Nice to Have: Polish, minor improvements, low-priority features
   - ⏸️ Backlog: Future considerations or blocked by external dependencies

3. **Add task using this COMPACT template:**

```markdown
### [Clear, descriptive task title]
**Status:** 📋 Needs Analysis | **Est:** ? | **Impact:** ? | **Complexity:** ?
**Added:** YYYY-MM-DD

**Quick Summary:**
[1-2 sentences explaining what needs to be done and why. Keep it brief!]

**Key Files:** (pending analysis)
```

4. **Save TODO.md**
5. **Inform user:** "Task added. The file watcher will automatically analyze it if running."

---

## Format Details

### Status Line (Compact Metadata)
```markdown
**Status:** 🎯 Ready | **Est:** 15h | **Impact:** HIGH | **Complexity:** MEDIUM
```

All key info in one line for easy scanning!

### After Analysis
```markdown
**Status:** 🎯 Ready | **Est:** 15-20h | **Impact:** HIGH | **Complexity:** MEDIUM
**Added:** 2025-10-18 | [📋 Analysis](/.todo-analysis/task-slug.md)
```

The analysis link points to detailed breakdown (complexity reasoning, approach, dependencies, etc.)

---

## Task Status Indicators

- 📋 **Needs Analysis** - New task, not yet analyzed
- 🎯 **Ready** - Analyzed and ready to start
- 🚧 **In Progress** - Currently being worked on
- ⏸️ **Blocked** - Waiting on dependencies
- ✅ **Done** - Completed (moved to archive after 7 days)

---

## Priority Guidelines

**🔴 Critical (Do First)**
- Production bugs
- Security vulnerabilities
- Blockers for other tasks
- Critical user-facing features

**🟡 Important (Do Soon)**
- Major features
- Performance improvements
- Significant technical debt
- Important refactors

**🟢 Nice to Have (When Free)**
- UI polish
- Minor improvements
- Low-priority features
- Code cleanup

**⏸️ Backlog (Future / Blocked)**
- Future considerations
- Blocked by external dependencies
- Ideas for later

---

## Viewing Tasks

When user says "show todos", "what's on the todo list", or "show tasks":

1. **Read TODO.md**
2. **Summarize compactly:**
   - Read the Quick Stats line (shows everything at a glance!)
   - List ready tasks (🎯) with their estimates
   - Mention any blocked tasks

Example response:
```
📊 Quick Stats: 5 active | 3 ready | 1 in progress | 1 needs analysis

Ready to start (🎯):
- Optimize AI response times (20h, HIGH impact)
- Fix minimap rendering bug (3h, MEDIUM impact)
- Add PNG export (8h, MEDIUM impact)
```

---

## Moving Tasks to Done

When user says "mark [task] as done", "complete [task]", or "[task] is finished":

1. **Find task in TODO.md**
2. **Move to "✅ Done (Last 7 Days)" section**
3. **Use simple completion format:**
   ```markdown
   ### [Task title] ✅
   **Completed:** YYYY-MM-DD
   **Original Priority:** 🟡 Important
   
   [One-sentence summary of what was done]
   ```
4. **Update Quick Stats**
5. **Save TODO.md**

Note: Tasks auto-archive to `.todo-archive/YYYY-MM.md` after 7 days (run `npm run archive-todos`)

---

## Context-Aware TODO Creation

When discussing a bug, feature, or improvement during conversation:
- **Proactively suggest:** "Would you like me to add this to the TODO list?"
- If user agrees, create task with context from conversation
- Keep summary brief (1-2 sentences), let agent analyze details

---

## Examples

### Example 1: Adding a bug
```
User: "The minimap is showing shapes in the wrong position"
Assistant: "That sounds like a positioning bug. Would you like me to add this to the TODO list?"
User: "Yes"
Assistant: [Adds to 🔴 Critical]

### Minimap shape positioning bug
**Status:** 📋 Needs Analysis | **Est:** ? | **Impact:** ? | **Complexity:** ?
**Added:** 2025-10-18

**Quick Summary:**
Shapes in minimap are offset/positioned incorrectly. Likely viewport coordinate issue.

**Key Files:** (pending analysis)
```

### Example 2: Adding a feature
```
User: "Add to task list: support for exporting canvas as PNG"
Assistant: [Determines 🟡 Important, adds concise task]
"Added to Important. Agent will analyze automatically if watcher is running."
```

### Example 3: Viewing compact format
```
User: "What should I work on?"
Assistant: "Quick Stats: 3 active | 2 ready | 0 in progress

Ready tasks:
1. Fix circle rotation bug (5h, HIGH impact, MEDIUM complexity)
2. Add hover states to buttons (3h, MEDIUM impact, LOW complexity)

The circle bug is critical and ready to start!"
```

---

## Agent Analysis System

### Manual trigger:
```bash
npm run analyze-todos
```

### File watcher (recommended):
```bash
npm run watch-todos
```

### Archive old completed tasks:
```bash
npm run archive-todos
```

### What the agent does:
1. Finds tasks with status "📋 Needs Analysis"
2. Identifies relevant files using grep/ripgrep
3. Calls GPT-4o for detailed analysis
4. **Writes detailed analysis to `.todo-analysis/[task-slug].md`**
5. **Updates TODO.md with compact summary + link**
6. Changes status to "🎯 Ready"

**Agent won't re-analyze:**
- Tasks already marked 🎯 Ready
- Tasks marked 🚧 In Progress
- Tasks marked ⏸️ Blocked
- Tasks in ✅ Done section

---

## Detailed Analysis Files

Each analyzed task gets a detailed markdown file in `.todo-analysis/`:

**Example: `.todo-analysis/optimize-ai-response-times.md`**
- Full task context
- 3-5 relevant files with explanations
- Complexity reasoning (2-3 paragraphs)
- Impact assessment
- Step-by-step recommended approach
- Dependencies (blocks/blocked by)
- Risk assessment

**TODO.md stays clean** - just title, status, summary, and key files!

---

## Task Title Guidelines

- Be specific and actionable
- Start with a verb when possible
- Include the "what" not the "how"
- Keep under 80 characters

**Good:**
- ✅ Fix minimap shape positioning bug
- ✅ Add PNG export functionality
- ✅ Optimize AI response caching

**Bad:**
- ❌ Minimap issue (too vague)
- ❌ Use different algorithm for canvas rendering (too much "how")
- ❌ Investigate potential performance improvements... (too long)

---

## Quick Summary Guidelines

**Keep it to 1-2 sentences!** This is the key to keeping TODO.md scannable.

**Good:**
```markdown
**Quick Summary:**
Canvas render performance drops below 30fps with 500+ shapes. Need virtualization or render optimization.
```

**Bad (too long):**
```markdown
**Quick Summary:**
Users are reporting significant performance issues when working with large canvases. We've identified that the main bottleneck is in the shape rendering logic, particularly in Canvas.jsx and Shape.jsx. Currently we're rendering all shapes even when off-screen. We should implement virtualization similar to how the minimap works, or potentially use Konva's built-in layer caching. This affects user experience significantly as the app becomes unusable with complex designs.
```

**Agent will provide the detailed analysis!** Keep the summary brief.

---

## Important Notes

- **Compact format is key** - Keep TODO.md scannable (1-2 minute read)
- **Detailed analysis lives in `.todo-analysis/`** - Link to it, don't inline it
- **File watcher is primary workflow** - Auto-analyzes when you add tasks
- **Always use exact template format** - Parser depends on it
- **Update Quick Stats** when moving/completing tasks
- **Run archive script monthly** - `npm run archive-todos` (or automate it)
- **Only create tasks in active sections** (🔴🟡🟢⏸️), never in ✅ Done

---

## Quick Commands Reference

- `npm run analyze-todos` - Manual analysis (one-time)
- `npm run watch-todos` - File watcher (auto-analyzes on changes)
- `npm run archive-todos` - Archive old completed tasks (7+ days)
- `npm run todo` - Open TODO.md in editor

---

## Success Indicators

A well-maintained TODO.md should be:
- **Scannable in 1-2 minutes** (not 10+ minutes scrolling verbose analysis)
- **Compact** (5-10 lines per task, not 40+ lines)
- **Actionable** (clear priorities, estimates, impact levels)
- **Up-to-date** (completed tasks archived, stats accurate)

The compact format makes TODO.md a **quick reference tool**, not a detailed spec document!
