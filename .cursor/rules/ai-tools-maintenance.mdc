Description: Guidelines for maintaining AI tools and their documentation in sync
Globs: src/services/ai/*.js, src/components/AI/AIChat.jsx

# AI Tools Maintenance Protocol

## Critical Files That Must Stay in Sync

When modifying AI tools, **ALL** of these must be updated together:

1. **Tool Implementation** - `src/services/ai/tools/*.js`
   - Tool function with Zod schema
   - Add to `tools` array

2. **Planning Prompt** - Tool definitions in planning prompts
   - List tool with complete parameter specs
   - Include usage examples for complex tools

3. **Action Handler** - `src/components/AI/AIChat.jsx`
   - Add `case 'action_name':` handler
   - Implement canvas operation

4. **Documentation** - Update relevant docs when making significant changes

## Update Checklist

### Adding a New Tool
- [ ] Create tool function with Zod schema
- [ ] Add to `tools` array
- [ ] Add to planning prompt with parameter specs
- [ ] Implement action handler in `AIChat.jsx`
- [ ] Test with actual AI commands

### Modifying an Existing Tool
- [ ] Update tool schema
- [ ] Update planning prompt parameter specs
- [ ] Update action handler if needed
- [ ] Test edge cases

### Removing a Tool
- [ ] Remove from `tools` array
- [ ] Remove from planning prompt
- [ ] Remove action handler case

## Common Mistakes to Avoid

‚ùå **DON'T:**
1. Add a tool without updating the planning prompt
   - Result: AI doesn't know about it
2. Update schema without updating planning prompt
   - Result: AI generates invalid parameters
3. Add tool without implementing action handler
   - Result: Nothing happens

‚úÖ **DO:**
1. Update all locations in a single commit
2. Test with real AI commands before committing
3. Keep planning prompt in sync with schemas

## Model Routing

The AI uses **smart model routing** to optimize speed and cost:
- **GPT-4o-mini**: Simple requests (2x faster, 10x cheaper)
- **GPT-4o**: Complex requests (more capable)

Classification happens automatically via `classifyRequestComplexity()`.

## Architecture Principles

### DRY (Don't Repeat Yourself)
- Reuse existing tools when possible
- Enhance existing tools rather than creating duplicates

### Single Responsibility
- Each tool should do ONE thing well
- Complex operations use multiple tools

### Performance First
- Batch operations for 2+ shapes
- Minimize LLM calls by consolidating operations
- Emphasize batching in planning prompts

### Intelligent Defaults
- Auto-detect shape types from properties
  - `x1, y1, x2, y2` ‚Üí line
  - `radius` ‚Üí circle
  - `text` ‚Üí text
- Use `!== undefined` for zero-capable properties (x, y, opacity)

### Coordinate System Consistency
- **AI receives**: Center coordinates (intuitive)
- **Storage uses**: Top-left of bounding box (consistent)
- **Always document** coordinate conversions

### Rotation Consistency
- ALL shapes rotate around their centerpoint
- Use `offsetX` and `offsetY` for proper rotation axis

## Red Flags (Sync Issues)

üö® **These indicate synchronization problems:**

1. AI says it doesn't have a tool you just added
   ‚Üí Planning prompt not updated

2. AI generates a plan but nothing happens
   ‚Üí Action handler not implemented

3. AI generates invalid parameters
   ‚Üí Planning prompt doesn't match schema

## Quick Reference

### Key Files
- Tool implementations: `src/services/ai/tools/*.js`
- Planning prompts: Look for `generateExecutionPlan()` or similar
- Action handlers: `src/components/AI/AIChat.jsx`

### Commit Message Format
```
feat(ai-tools): Add [tool_name] tool

- Implemented [tool_name] with [parameters]
- Updated planning prompt with tool specs
- Added action handler in AIChat.jsx
- Tested with: "[example command]"
```

---

**Remember:** If you modify AI tools and don't update ALL related files, the AI will have incomplete information, leading to broken functionality.
